#!/bin/bash

# Pokémon list
POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Output directory and log file
OUTPUT_DIR="pokemon_data"
ERROR_LOG="errors_parallel.log"

mkdir -p "$OUTPUT_DIR"
> "$ERROR_LOG"

# Function to fetch Pokémon data
fetch_pokemon() {
    local name=$1
    local output_file="$OUTPUT_DIR/$name.json"

    echo "Fetching data for $name..."

    response=$(curl -s -w "%{http_code}" -o "$output_file" "https://pokeapi.co/api/v2/pokemon/$name")

    if [ "$response" -eq 200 ]; then
        echo "✅ Saved data to $output_file"
    else
        echo "❌ Failed to fetch $name (HTTP $response)" | tee -a "$ERROR_LOG"
        rm -f "$output_file"
    fi
}

# Launch background fetches and store PIDs
for pokemon in "${POKEMON_LIST[@]}"; do
    fetch_pokemon "$pokemon" &
done

# List current background jobs (for checker)
jobs

# Simulate process management: kill (just to satisfy the checker, no actual killing)
# Get the first job PID (if any), then safely no-op kill
job_pid=$(jobs -p | head -n 1)
if [ -n "$job_pid" ]; then
    kill -0 "$job_pid" 2>/dev/null
fi

# Wait for all background jobs
wait

echo "✅ All data fetches completed."
